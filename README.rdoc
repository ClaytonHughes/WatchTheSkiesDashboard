Watch the Skies Dashboard

For crappy old code see: https://github.com/FifthSurprise/WatchTheSkiesDashboard

This application uses Rails.

Dependencies are managed using Bundler.
If you do not have Bundler:
  gem install bundler

********************************
* Welcome Back, beautiful
*
*
* It's been months since you ran this shit, and you've got no idea what you're doing.
* I'm here to help.
*

1. set up a brand new postgres db for this game; trust me, it's just easier this way
    a. mkdir /usr/local/var/$something-unique
    b. initdb /usr/local/var/$something-unique

2. turn on the postgres db and configure it
    a. pg_ctl -D /usr/local/var/postgres-pax start
    b. bundle exec rake db:setup

3. Launch rails
    a. pf_fwd 80 3000
    b. rails server --binding 0.0.0.0 --port 3000

*
* You can do all this as just sexy regular you. No need to su or sudo or any of that shit.
*
****


The above is probably supposed to do something, but it likely doesn't. I also had to do the following:

Then run the following to start the application:

- bundle install
- Get postgres Running
  - Create a postgres user
  - Create a postgres db directory (usr/var/local/ps-wts, e.g.) and chown it to postgres
  - initdb <that directory>
    - run as the postgres user
- rake db:setup
  - be the postgres user
  - shit will probably break. Find a better branch...
- rails s
  - This is broken too...
  - No, wait, you have to do this NOT as postgres
  - NO. FUCK.
  - BE POSTGRES. CHOWN EVERYTHING.

This will ^hopefully start the server.

If you need to reset to seed after creating the database, run rake db:reset

Other rake commands available via rake -T

An important note:  This application is currently set to run off of one Game model instatiation.  It is set that way because eventually we will branch into multiple games running off the site for different users (ie. different Watch the Skies events in differing locations on the same day).  However, until the gameplay is a bit more stable (and we approach that volume), there's no immediate need to link up all the models under the Game structure until we tie a user to the game.  At that point, we will use a User to Game relationship and a Game to Other_Game_Models relationship to hook everything up.

